const BACKGROUNDS = [
  '/assets/img/generator/background/1.jpg',
  '/assets/img/generator/background/2.jpg',
  '/assets/img/generator/background/3.jpg',
  '/assets/img/generator/background/4.jpg',
  '/assets/img/generator/background/5.jpg',
  '/assets/img/generator/background/6.jpg',
  '/assets/img/generator/background/7.jpg',
  '/assets/img/generator/background/8.jpg',
  '/assets/img/generator/background/9.jpg',
  '/assets/img/generator/background/10.jpg',
];
const PICTURES = [
  '/assets/img/generator/picture/1.png',
  '/assets/img/generator/picture/2.png',
  '/assets/img/generator/picture/3.png',
  '/assets/img/generator/picture/4.png',
  '/assets/img/generator/picture/5.png',
  '/assets/img/generator/picture/6.png',
  '/assets/img/generator/picture/7.png',
];
const SELECTED = {
  background: BACKGROUNDS[0],
  picture: PICTURES[0],
  text1: 'SAMPLE TEXT',
  text2: 'SAMPLE TEXT',
};

const canvasEl = document.querySelector('canvas.generator__canvas');
const ctx = canvasEl.getContext('2d');
const CANVAS_WIDTH = 1024;
const CANVAS_HEIGHT = 1024;

document.querySelector('#first-line').addEventListener('input', (e) => {
  SELECTED.text1 = e.target.value;
  drawAvatar();
});
document.querySelector('#second-line').addEventListener('input', (e) => {
  SELECTED.text2 = e.target.value;
  drawAvatar();
});

document.querySelector('.generator__swiper_bg .swiper-wrapper').innerHTML =
  BACKGROUNDS.map(
    (background, idx) => `<div class="swiper-slide">
      <div class="generator__background${
        idx === 0 ? ' generator__background_active' : ''
      }">
        <img src="${background}" alt="Background #${idx + 1}" />
      </div>
    </div>`
  ).join('');

document.querySelector('.generator__swiper_picture .swiper-wrapper').innerHTML =
  PICTURES.map(
    (picture, idx) => `<div class="swiper-slide">
      <div class="generator__picture${
        idx === 0 ? ' generator__picture_active' : ''
      }" style="background: url(${BACKGROUNDS[0]})">
        <img src="${picture}" alt="Picture #${idx + 1}" />
      </div>
    </div>`
  ).join('');

document.querySelectorAll('.generator__background').forEach((background) => {
  background.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();

    const image = background.querySelector('img').getAttribute('src');
    document
      .querySelectorAll('.generator__background_active')
      .forEach((e) => e.classList.remove('generator__background_active'));
    background.classList.add('generator__background_active');

    document
      .querySelectorAll('.generator__picture')
      .forEach((p) => (p.style.background = `url(${image})`));
    SELECTED.background = image;
    drawAvatar();
  });
});
document.querySelectorAll('.generator__picture').forEach((picture) => {
  picture.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();

    const image = picture.querySelector('img').getAttribute('src');
    document
      .querySelectorAll('.generator__picture_active')
      .forEach((e) => e.classList.remove('generator__picture_active'));
    picture.classList.add('generator__picture_active');

    SELECTED.picture = image;
    drawAvatar();
  });
});

drawAvatar();

async function drawAvatar() {
  try {
    await drawCanvasImage(ctx, SELECTED.background);
    await drawCanvasImage(ctx, SELECTED.picture);
    drawTopText(ctx, SELECTED.text1);
    drawBottomText(ctx, SELECTED.text2);
  } catch (error) {
    console.error(error);
    alert('Error during drawing avatar!');
  }
}

function drawTopText(ctx, text) {
  ctx.fillStyle = '#000000';
  ctx.strokeStyle = '#ffffff';
  ctx.lineWidth = 10;
  ctx.font = '128px Friends Zone';
  ctx.strokeText(text, (CANVAS_WIDTH - ctx.measureText(text).width) / 2, 150);
  ctx.fillText(text, (CANVAS_WIDTH - ctx.measureText(text).width) / 2, 150);
}
function drawBottomText(ctx, text) {
  ctx.fillStyle = '#000000';
  ctx.strokeStyle = '#ffffff';
  ctx.lineWidth = 10;
  ctx.font = '128px Friends Zone';
  ctx.strokeText(
    text,
    (CANVAS_WIDTH - ctx.measureText(text).width) / 2,
    CANVAS_HEIGHT - 60
  );
  ctx.fillText(
    text,
    (CANVAS_WIDTH - ctx.measureText(text).width) / 2,
    CANVAS_HEIGHT - 60
  );
}

function drawCanvasImage(
  ctx,
  src,
  x = 0,
  y = 0,
  width = CANVAS_WIDTH,
  height = CANVAS_HEIGHT
) {
  return new Promise((res, rej) => {
    if (!src || src === '#') return res();
    try {
      const image = new Image();
      image.src = src;
      image.onload = () => {
        ctx.drawImage(image, x, y, width, height);
        res(src);
      };
    } catch (error) {
      rej(error);
    }
  });
}

function clearCanvas(ctx, width = CANVAS_WIDTH, height = CANVAS_HEIGHT) {
  return ctx.clearRect(0, 0, width, height);
}

function downloadAvatar() {
  const url = canvasEl.toDataURL();
  const link = document.createElement('a');
  link.style.opacity = 0;
  link.style.position = 'absolute';
  link.href = url;
  link.download = 'avatar.jpeg';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}
